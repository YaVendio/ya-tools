[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ya-tools"
version = "0.1.0"
description = "YaVendiÃ³ Tools"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
dependencies = [
    "fastapi>=0.110.0",
    "uvicorn>=0.27.1",
    "pydantic>=2.6.1",
    "httpx>=0.26.0",
    "python-dotenv>=1.0.0",
    "structlog>=24.1.0",
    "rich>=13.7.0",
    "asyncio>=3.4.3",
    "aiohttp>=3.9.3",
    "mcp[cli]>=1.3.0",
    "pywa>=2.0.0",
    "redis>=5.0.0",
    "infisicalsdk>=1.0.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "ruff>=0.2.0",
    "pyright>=1.1.352",
]

# Setuptools Configuration
[tool.setuptools.packages.find]
where = ["."]
exclude = [".venv", "venv", "__pycache__", ".pytest_cache", ".ruff_cache"]

# Ruff Configuration
[tool.ruff]
# Select Python target version
target-version = "py313"
line-length = 88

# Linting configuration
[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "ERA", # eradicate
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E203", # Whitespace before ':'
    "E501", # Line too long
]
exclude = [".git", ".venv", "venv", "__pycache__", "*.pyi"]

# Import sorting configuration
[tool.ruff.lint.isort]
known-first-party = ["app", "services", "tools", "scripts"]
combine-as-imports = true

# Formatter configuration
[tool.ruff.format]
quote-style = "double"
indent-style = "space"


# Pyright Configuration
[tool.pyright]
include = ["app", "services", "tools", "scripts"]
exclude = ["**/__pycache__", "**/.pytest_cache", "**/.venv", "**/venv"]
reportMissingImports = "error"
reportMissingTypeStubs = "none"
reportUnknownParameterType = "error"
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = "warning"
reportMissingParameterType = "error"
reportUntypedFunctionDecorator = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "error"
typeCheckingMode = "strict"
pythonVersion = "3.13"
useLibraryCodeForTypes = true

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
addopts = "-v --tb=short --strict-markers -xvs"

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.25.3",
]
